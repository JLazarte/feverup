version: '3.9'

services:
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: challenge-db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/admin --quiet" ]
      interval: 5s
      timeout: 2s
      retries: 5

  mongo-setup:
    build:
      context: ..
      dockerfile: infra/mongo-setup.dockerfile
    container_name: mongo_setup
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: mongodb://root:root@mongo:27017/admin
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    command: ["redis-server",  "--save", "60", "1", "--appendonly", "yes", "--requirepass", "root", "--aclfile", "/app/aclfile.acl"]
    volumes:
      - redis_data:/data
      - ./redis-cache-aclfile.acl:/app/aclfile.acl
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3


  gathering-service:
    build:
      context: ..
      dockerfile: infra/gathering.dockerfile
    image: gathering-app
    container_name: gathering_app_container
    ports:
      - "8001:8080"
    working_dir: /app
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MONGO_URI: mongodb://writer:writer@mongo:27017/challenge-db
      REDIS_URI: redis://writer:writer@redis:6379
      EVENTS_PROVIDER_URL: https://provider.code-challenge.feverup.com/api/events
      GATHERING_CRON_EXPRESION: '*/5 * * * *'
    networks:
      - app-network

  supplier-service:
    build:
      context: ..
      dockerfile: infra/supplier.dockerfile
    image: supplier-app
    container_name: supplier_app_container
    ports:
      - "8002:8080"
    working_dir: /app
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URI: redis://reader:reader@redis:6379
    networks:
      - app-network

#  supplier-service:
#    build:
#      context: ..
#      dockerfile: infra/supplier.dockerfile
#    image: supplier-app
#    deploy: 
#      mode: replicated
#      replicas: 3
#    working_dir: /app
#    depends_on:
#      - mongo
#    environment:
#      MONGO_URI: mongodb://reader:reader@mongo:27017/challenge-db
#    networks:
#      - app-network
#
#  supplier-load-balancer:
#    image: nginx
#    container_name: supplier-load-balancer
#    ports:
#      - "8003:8080"
#    volumes:
#      - ./supplier-service-load-balancer.conf:/etc/nginx/nginx.conf
#    networks:
#      - app-network
#    depends_on:
#      - supplier-service

volumes:
  redis_data:
    driver: local
  mongo-data:

networks:
  app-network:
    driver: bridge